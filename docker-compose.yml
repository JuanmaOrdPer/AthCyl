version: '3.8'

services:
  # Servicio de base de datos PostgreSQL
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=athcyldb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Servicio de backend (Django)
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: >
      sh -c "python manage.py wait_for_db && \
             python manage.py migrate && \
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - DB_NAME=athcyldb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # Servicio de frontend (React Native Web)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api/
    depends_on:
      - backend
    stdin_open: true
    tty: true

  # Servidor Nginx como proxy inverso (opcional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/web-build:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

# Vol√∫menes para persistencia de datos
volumes:
  postgres_data:
